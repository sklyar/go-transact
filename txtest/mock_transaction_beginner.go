// Code generated by mockery v2.26.1. DO NOT EDIT.

package txtest

import (
	context "context"

	txsql "github.com/sklyar/go-transact/txsql"
	mock "github.com/stretchr/testify/mock"
)

// TransactionBeginner is an autogenerated mock type for the TransactionBeginner type
type TransactionBeginner struct {
	mock.Mock
}

// Begin provides a mock function with given fields: ctx, opts
func (_m *TransactionBeginner) Begin(ctx context.Context, opts *txsql.TxOptions) (txsql.Tx, error) {
	ret := _m.Called(ctx, opts)

	var r0 txsql.Tx
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *txsql.TxOptions) (txsql.Tx, error)); ok {
		return rf(ctx, opts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *txsql.TxOptions) txsql.Tx); ok {
		r0 = rf(ctx, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(txsql.Tx)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *txsql.TxOptions) error); ok {
		r1 = rf(ctx, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewTransactionBeginner interface {
	mock.TestingT
	Cleanup(func())
}

// NewTransactionBeginner creates a new instance of TransactionBeginner. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewTransactionBeginner(t mockConstructorTestingTNewTransactionBeginner) *TransactionBeginner {
	mock := &TransactionBeginner{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// TransactionOption is an autogenerated mock type for the TransactionOption type
type TransactionOption struct {
	mock.Mock
}

// Execute provides a mock function with given fields: options
func (_m *TransactionOption) Execute(options *txsql.TxOptions) {
	_m.Called(options)
}

type mockConstructorTestingTNewTransactionOption interface {
	mock.TestingT
	Cleanup(func())
}

// NewTransactionOption creates a new instance of TransactionOption. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewTransactionOption(t mockConstructorTestingTNewTransactionOption) *TransactionOption {
	mock := &TransactionOption{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
